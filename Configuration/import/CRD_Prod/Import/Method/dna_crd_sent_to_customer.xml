<AML>
 <Item type="Method" id="46D096AB6C294093B071C7BB1C0CDEF3" action="add">
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[/*
this function updates the related CRD fields dna_first_sent and dna_crdsent
trigger: workflow activity on close
*/

Innovator innovator = this.getInnovator();
//Dim MyInn As Innovator = Me.getInnovator();


Item query1 = this.newItem(); 
 Item query2 = this.newItem(); 
 Item query3 = this.newItem();
 Item query4 = this.newItem();
 Item query5 = this.newItem();
String activity_id = "";
String activityclosed="";
String activityDecision = "";
//get the controlled item
string workflowProcessID = ""; 
  
 // Get the Workflow Process. 
 switch (this.getType()) 
 { 
     case "Workflow Process": 
         workflowProcessID = this.getID(); 
         break; 
     case "Activity": 
     { 
         String activityId = this.getID(); 
         if (activityId.Length != 32) 
 		{ 
             return innovator.newError("Get Controlled Item: Invalid Activity id"); 
 		} 
 		
 		query4 = this.newItem("Activity Assignment", "get");
 		query4.setAttribute("where", "ACTIVITY_ASSIGNMENT.source_id='"+activityId+"' and ACTIVITY_ASSIGNMENT.closed_on is not null");
 		
 		Item activity_vote = query4.apply(); 
 		activityDecision=activity_vote.getProperty("path","");
 		activity_id=activity_id+"["+activity_vote.getProperty("path","")+"]: " + activity_vote.getProperty("comments","")+"\n" ;
 		
activityclosed=activity_vote.getProperty("closed_on","");
//   query5 = this.newItem("Workflow Process Path", "get");
//   query5.setAttribute("where", "WORKFLOW_PROCESS_PATH.source_id='"+activityId+"' and WORKFLOW_PROCESS_PATH.is_complete='1'");
//   Item activity_path = query5.apply();
//   activity_id=activity_id+query5;		

 		
 		
 		//activity_id=activity_id+activityId;
         query1 = this.newItem("Workflow Process", "get"); 
         query1.setAttribute("select", "id"); 
         query2 = query1.createRelationship("Workflow Process Activity", "get"); 
         query2.setAttribute("select", "id,related_id"); 
         query3 = query2.createRelatedItem("Activity", "get"); 
         query3.setAttribute("select", "id"); 
         query3.setID(activityId); 
         var workflowProcess = query1.apply(); 
         if (workflowProcess.getItemCount() != 1) 
 		{ 
             return innovator.newError("Get Controlled Item: Error getting Workflow Process: " + workflowProcess.getErrorDetail()); 
 		} 
         workflowProcessID = workflowProcess.getID(); 
         break; 
     } 
     default: 
         return innovator.newError("Get Controlled Item: Type must be Workflow Process or Activity"); 
 } 
  
 if (workflowProcessID.Length != 32) 
 { 
  return innovator.newError("Get Controlled Item: Invalid Workflow Process id"); 
 } 
  
 // Get the Workflow relationship; 
 query1 = this.newItem("Workflow", "get"); 
 query1.setAttribute("select", "id,related_id,source_id,source_type"); 
 query2 = query1.createRelatedItem("Workflow Process", "get"); 
 query2.setAttribute("select", "id"); 
 query2.setID(workflowProcessID); 
  
 Item workflow = query1.apply(); 
 if (workflow.getItemCount() != 1) 
 { 
  return innovator.newError("Get Controlled Item: Error retriving the Workflow relationship: " + workflow.getErrorDetail()); 
 } 
 string controlledId = workflow.getProperty("source_id", ""); 
 if (controlledId.Length != 32) 
 { 
  return innovator.newError("Get Controlled Item: Invalid Controlled Item id"); 
 } 
  
 // Get the controlled item. 
 query3 = this.newItem(); 
 query3.setAction("get"); 
 query3.setAttribute("typeId", workflow.getProperty("source_type", "")); 
 query3.setID(controlledId); 
 Item CtrlItem = query3.apply(); 

if (CtrlItem.getItemCount() != 1) 
 { 
  return innovator.newError("Get Controlled Item: Error retriving the related item: " +CtrlItem.getItemCount()+  CtrlItem.getErrorDetail()); 
 } 



if (activityDecision == "Send To customer") {

//Item crd = this.apply("Get Controlled Item");

var alreadysenttocustomer = CtrlItem.getProperty("dna_crd_first_sent");
if ((alreadysenttocustomer == "")||(alreadysenttocustomer == null)) {
    CtrlItem.setProperty("dna_crd_first_sent", activityclosed);
}


CtrlItem.setProperty("dna_crdsent",activityclosed);


}
return CtrlItem.apply("merge");
]]></method_code>
  <method_type>C#</method_type>
  <name>dna_crd_sent_to_customer</name>
 </Item>
</AML>